import tkinter
import cv2
import PIL.Image
import PIL.ImageTk
from functools import partial
import threading
import time
import imutils


SET_WIDTH = 480
SET_HEIGHT = 260


def pending(decision):
    frame = cv2.cvtColor(cv2.imread("b.jfif"), cv2.COLOR_BGR2RGB)
    frame = imutils.resize(frame, width=SET_WIDTH, height=SET_HEIGHT)
    frame = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(frame))
    canvas.image = frame
    canvas.create_image(0, 0, image=frame, anchor=tkinter.NW)

    time.sleep(1)
    frame = cv2.cvtColor(cv2.imread("h.jfif"), cv2.COLOR_BGR2RGB)
    frame = imutils.resize(frame, width=SET_WIDTH, height=SET_HEIGHT)
    frame = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(frame))
    canvas.image = frame
    canvas.create_image(0, 0, image=frame, anchor=tkinter.NW)

    time.sleep(1)
    if decision == "out":
        decisionImage = "e.jfif"
        canvas.create_text(120, 25, fill="black",
                           font="Times 20 italic bold", text="out")
    else:
        decisionImage = "a.jfif"
    frame = cv2.cvtColor(cv2.imread(decisionImage), cv2.COLOR_BGR2RGB)
    frame = imutils.resize(frame, width=SET_WIDTH, height=SET_HEIGHT)
    frame = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(frame))
    canvas.image = frame
    canvas.create_image(0, 0, image=frame, anchor=tkinter.NW)


stream = cv2.VideoCapture("as.mp4")


def play(speed):
    print(f"You clicked on play {speed}")

    frame1 = stream.get(cv2.CAP_PROP_POS_FRAMES)
    stream.set(cv2.CAP_PROP_POS_FRAMES, frame1 + speed)

    grabbed, frame = stream.read()
    if not grabbed:
        exit()
    frame = imutils.resize(frame, width=SET_WIDTH, height=SET_HEIGHT)
    frame = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(frame))
    canvas.image = frame
    canvas.create_image(0, 0, image=frame, anchor=tkinter.NW)
    if flag:
        canvas.create_text(120, 25, fill="black",
                           font="Times 20 italic bold", text="Decision Pending")
    flag = not flag


def out():
    thread = threading.Thread(target=pending, args=("out",))
    thread.daemon = 1
    thread.start()
    print("Player is out")


def notout_1():
    thread = threading.Thread(target=pending, args=("notout_1",))
    thread.daemon = 1
    thread.start()
    print("Player is notout")


# --------------------------------------------------------------------------------
root = tkinter.Tk()
root.title("Third Umpire Decision Review System")
cv_img = cv2.cvtColor(cv2.imread("d.jfif"), cv2.COLOR_BGR2RGB)
canvas = tkinter.Canvas(root, width=SET_WIDTH, height=SET_HEIGHT)
photo = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(cv_img))
image_on_canvas = canvas.create_image(0, 0, ancho=tkinter.NW, image=photo)
canvas.pack()

# button to contro playback---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

btn = tkinter.Button(root, text="<< Previous (fast)", width=50,
                     bg="red", fg="black", border="2px", command=partial(play, -25))
btn.pack(pady="4px")

btn = tkinter.Button(root, text="<< Previous (slow)", width=50,
                     bg="red", fg="black", border="2px", command=partial(play, -2))
btn.pack(pady="4px")

btn = tkinter.Button(root, text="Next (slow) >>", width=50,
                     bg="red", fg="black", border="2px", command=partial(play, 2))
btn.pack(pady="4px")

btn = tkinter.Button(root, text="Next (fast) >>", width=50,
                     bg="red", fg="black", border="2px", command=partial(play, 25))
btn.pack(pady="4px")

btn = tkinter.Button(root, text="Give Out", width=50,
                     bg="red", fg="black", border="2px", command=out)
btn.pack(pady="4px")

btn = tkinter.Button(root, text="Give Not Out", width=50,
                     bg="red", fg="black", border="2px", command=notout_1)
btn.pack(pady="4px")


root.mainloop()
